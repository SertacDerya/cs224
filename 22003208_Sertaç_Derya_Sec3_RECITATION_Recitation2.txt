CS224
Recitation No 2
Section No 3
Serta√ß Derya
22003208
14.03.2023
############################################################################
	.data
ask_size: .asciiz "Enter the size of the array: "
ask_entry: .asciiz "Enter an element: "
comma: .asciiz ", "
end: .asciiz "\n"
hamming_prompt: .asciiz "The hamming distance of arrays is: "
	
	
	.text
	.globl main
main:
	la $a0, ask_size
	addi $v0, $0, 4
	syscall
	addi $v0, $0, 5
	syscall
	add $s0, $v0, $0 # first array size stored in $s0 
	
	add $a0, $0, $v0 #array size argument = $a0
	jal CreateArray #$a0 represents array size
	add $s1, $v0, $0 # first arr adress stored in $s1
	
	la $a0, ask_size
	addi $v0, $0, 4
	syscall
	addi $v0, $0, 5
	syscall
	add $s2, $v0, $0 # second array size stored in $s2 
	
	add $a0, $0, $v0 #array size argument = $a0
	jal CreateArray #$a0 represents array size
	add $s3, $v0, $0 # first arr adress stored in $s3
	
	add $a0, $s0, $0 # argument for PrintArray (array size 1)
	add $a1, $s1, $0 # argument for PrintArray (array address 1)
	jal PrintArray
	
	add $a0, $s2, $0 # argument for PrintArray (array size 2)
	add $a1, $s3, $0 # argument for PrintArray (array address 2)
	jal PrintArray
	
	add $a0, $s0, $0
	add $a1, $s1, $0
	add $a2, $s2, $0
	add $a3, $s3, $0
	jal CalculateDistance
	
	add $s4, $v0, $0 # hamming distance
	
	la $a0, hamming_prompt
	addi $v0, $0, 4
	syscall
	add $a0, $s4, $0
	addi $v0, $0, 1
	syscall
	
	addi $v0, $0, 10
	syscall
	
CreateArray:
	addi $sp, $sp, -4
	sw $s1, 0($sp)
	addi $s1, $0, 4
	mult $a0, $s1 # multiply size by 4 to allocate enough space
	add $s1, $a0, $0
	mfhi $a0
	mflo $a0
	
	addi $v0, $0, 9
	syscall # the adress of the allocated array stored in $v0
	add $a1, $v0, $0 # $a1 carries the adress of the array
	add $a0, $s1, $0 # $a0 carries size 
	
	lw $s1, 0($sp)
	addi $sp, $sp, 4
	
	addi $sp, $sp, -8 # to store the return adress
	sw $ra, 4($sp)
	sw $s0, 0($sp)
	
	add $s0, $v0, $0 # store arr adress to $s0
	
	jal InitializeArray # $a0 represents array size, $a1 represents the array location
	
	#add $v0, $s0, $0 # store the value of arr address in $v0
	lw $ra, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 8
	jr $ra
	
InitializeArray: # $a0 represents array size, $a1 represents the array location
	addi $sp, $sp, -16 # to store $s0
	sw $a0, 12($sp) # save $a0
	sw $s0, 8($sp) # save $s0
	sw $s1, 4($sp) # save $s1
	sw $s2, 0($sp) # save $s2
	add $s0, $0, $0 # $s0 = 0 or i = 0
	add $s1, $a0, $0 # $s1 = $a0
	add $s2, $a1, $0 # $s2 = arr
	while:
		beq $s0, $s1, done
		
		la $a0, ask_entry
		addi $v0, $0, 4
		syscall
		addi $v0, $0, 5
		syscall
		
		sw $v0, 0($s2) # arr[i * 4] = $v0
		addi $s2, $s2, 4 # go to the next array space arr + 4
		addi $s0, $s0, 1 # i++
		j while
	done:
		lw $s2, 0($sp)
		lw $s1, 4($sp)
		lw $s0, 8($sp)
		lw $a0, 12($sp)
		addi $sp, $sp, 16
		add $v0, $a1, $0
		jr $ra # jump to CreateArray
										
PrintArray:	#a0 = arr size, $a1 = arr address																			
	addi $sp, $sp, -8
	sw $s0, 0($sp)
	sw $s1, 4($sp) 
	add $s0, $0, $0 # $s0 = i
	add $s1, $a0, $0 # $s1 = $a0
	for:
		beq $s0, $s1, done_print
		lw $a0, 0($a1)
		addi $v0, $0, 1
		syscall
		la $a0, comma
		addi $v0, $0, 4
		syscall
		
		addi $s0, $s0, 1
		addi $a1, $a1, 4
		j for
	done_print:
		la $a0, end
		addi $v0, $0, 4
		syscall
		
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		jr $ra
CalculateDistance: #a0 = arr size 1, a1 = arr address 1, a2 = arr size 2, a3 = arr address 2
	addi $sp, $sp, 16
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
				
	add $s0, $0, $0 # i = 0
	add $s1, $0, $0	# ham = 0
	
	compare:
		beq $s0, $a0, done_compare
		lw $s2, 0($a1)
		lw $s3, 0($a3)
		bne $s2, $s3, n_equal
		j else						
		n_equal:
			addi $s1, $s1, 1
		else:
			addi $a1, $a1, 4
			addi $a3, $a3, 4
			addi $s0, $s0, 1
			j compare																					
	done_compare:															
		add $v0, $s1, $0
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)	
		addi $sp, $sp, -16
		jr $ra
	
############################################################################																																																																																					
	.data
prompt: .asciiz "Please enter a number to save in register: "
space: .asciiz "\n"
distance: .asciiz "The hamming distance between registers is: "
continue: .asciiz "If you want to continue type 1, if not type 0: "

	.text
	.globl main
main:
	cont:
	jal InitializeRegister
	add $s0, $v0, $0 # first number is stored in $s0
	
	jal InitializeRegister
	add $s1, $v0, $0 # second number is stored in $s1
	
	add $a0, $s0, $0 
	add $a1, $s1, $0
	jal DisplayValues
	
	add $a0, $s0, $0 
	add $a1, $s1, $0
	jal CalculateDistance
	
	la $a0, continue
	addi $v0, $0, 4
	syscall
	
	addi $v0, $0, 5
	syscall
	
	beq $v0, 1, main
	
	addi $v0, $0, 10
	syscall
	
InitializeRegister:	
	la $a0, prompt
	addi $v0, $0, 4
	syscall
	addi $v0, $0, 5
	syscall
	
	jr $ra
DisplayValues:	
	addi $sp, $sp, -4
	sw $s0, 0($sp)
	
	add $s0, $a0, $0 # 1st register
	
	addi $v0, $0, 34
	syscall
	
	la $a0, space
	addi $v0, $0, 4
	syscall
	
	add $a0, $a1, $0
	addi $v0, $0, 34
	syscall
	
	la $a0, space
	addi $v0, $0, 4
	syscall
	
	lw $s0, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
CalculateDistance: # a0 first register, a1 second register
	addi $sp, $sp, -20
	sw $s0, 0($sp) #to have the xor value
	sw $s1, 4($sp) # i = 0
	sw $s2, 8($sp) # hamming amount
	sw $s3, 12($sp) # 32
	sw $s4, 16($sp) # 0x00000001 shifted one by one
	
	xor $s0, $a0, $a1 # differences between registers
	addi $s1, $0, 0
	addi $s2, $0, 0
	addi $s3, $0, 32
	addi $s4, $0, 1
	
	loop:
		and $a0, $s0, $s4
		bne $a0, $s4, n_equal
		addi $s2, $s2, 1

		n_equal:
			sll $s4, $s4, 1			
			addi $s1, $s1, 1
			bne $s1, $s3, loop
	done:
		la $a0, distance
		addi $v0, $0, 4
		syscall
		add $a0, $s2, $0
		addi $v0, $0, 1
		syscall
		la $a0, space
		addi $v0, $0, 4
		syscall
		
		add $v0, $s2, $0
		lw $s0, 0($sp) #to have the xor value
		lw $s1, 4($sp) # i = 0
		lw $s2, 8($sp) # hamming amount
		lw $s3, 12($sp) # 32
		lw $s4, 16($sp) # 0x00000001 shifted one by one
		addi $sp, $sp, 20
		jr $ra
############################################################################		
	.data
ask_size: .asciiz "Enter the size of the array: "
ask_entry: .asciiz "Enter an element: "
ask_index: .asciiz "Please enter a number between 0 and array size: "
prompt: .asciiz "The number of occurrences is: "	
	
	.text
	.globl main
main:
	la $a0, ask_size
	addi $v0, $0, 4
	syscall
	addi $v0, $0, 5
	syscall
	add $s0, $v0, $0 # first array size stored in $s0 
	
	add $a0, $0, $v0 #array size argument = $a0
	jal CreateArray #$a0 represents array size
	add $s1, $v0, $0 # first arr adress stored in $s1
	
	la $a0, ask_index
	addi $v0, $0, 4
	syscall
	addi $v0, $0, 5
	syscall
	add $s2, $v0, $0 # $s2 = index
	
	add $a0, $s1, $0
	add $a1, $s2, $0
	add $a2, $s0, $0
	jal CheckOccurrence
	add $s3, $v0, $0 # num of Occurrence
	
	la $a0, prompt
	addi $v0, $0, 4
	syscall
	add $a0, $s3, $0
	addi $v0, $0, 1
	syscall
	
	addi $v0, $0, 10
	syscall 
	
CreateArray:
	addi $sp, $sp, -4
	sw $s1, 0($sp)
	addi $s1, $0, 4
	mult $a0, $s1 # multiply size by 4 to allocate enough space
	add $s1, $a0, $0
	mfhi $a0
	mflo $a0
	
	addi $v0, $0, 9
	syscall # the adress of the allocated array stored in $v0
	add $a1, $v0, $0 # $a1 carries the adress of the array
	add $a0, $s1, $0 # $a0 carries size 
	
	lw $s1, 0($sp)
	addi $sp, $sp, 4
	
	addi $sp, $sp, -8 # to store the return adress
	sw $ra, 4($sp)
	sw $s0, 0($sp)
	
	add $s0, $v0, $0 # store arr adress to $s0
	
	jal InitializeArray # $a0 represents array size, $a1 represents the array location
	
	#add $v0, $s0, $0 # store the value of arr address in $v0
	lw $ra, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 8
	jr $ra
	
InitializeArray: # $a0 represents array size, $a1 represents the array location
	addi $sp, $sp, -16 # to store $s0
	sw $a0, 12($sp) # save $a0
	sw $s0, 8($sp) # save $s0
	sw $s1, 4($sp) # save $s1
	sw $s2, 0($sp) # save $s2
	add $s0, $0, $0 # $s0 = 0 or i = 0
	add $s1, $a0, $0 # $s1 = $a0
	add $s2, $a1, $0 # $s2 = arr
	while:
		beq $s0, $s1, done
		
		la $a0, ask_entry
		addi $v0, $0, 4
		syscall
		addi $v0, $0, 5
		syscall
		
		sw $v0, 0($s2) # arr[i * 4] = $v0
		addi $s2, $s2, 4 # go to the next array space arr + 4
		addi $s0, $s0, 1 # i++
		j while
	done:
		lw $s2, 0($sp)
		lw $s1, 4($sp)
		lw $s0, 8($sp)
		lw $a0, 12($sp)
		addi $sp, $sp, 16
		add $v0, $a1, $0
		jr $ra # jump to CreateArray
		
CheckOccurrence: # $a0 array address, $a1 index of an element, $a2 size of array
	addi $sp, $sp, -24
	sw $s0, 0($sp) #index mult by 4
	sw $s1, 4($sp) # 4 then the address of number
	sw $s2, 8($sp) # i = 0 for loop
	sw $s3, 12($sp) # occurrence
	sw $s4, 16($sp) # number
	sw $s5, 20($sp) # the element at i

	addi $s1, $0, 4
	mult $a1, $s1
	mfhi $s0
	mflo $s0
	
	add $s1, $a0, $s0 # address of number
	lw $s4, 0($s1)
	add $s2, $0, $0
	for:
		beq $s2, $a2, finish 
		lw $s5, 0($a0)
		bne $s5, $s4, not_equal # arr[i] == num
		addi $s3, $s3, 1
		not_equal:
			addi $a0, $a0, 4 # arr + 4
			addi $s2, $s2, 1 # i++
			j for
	finish:
		add $v0, $s3, $0
		lw $s0, 0($sp) 
		lw $s1, 4($sp) 
		lw $s2, 8($sp) 
		lw $s3, 12($sp) 
		lw $s4, 16($sp) 
		lw $s5, 20($sp) 
		addi $sp, $sp, 24
		
		jr $ra
	
	
