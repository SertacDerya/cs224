`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 18:58:18
// Design Name: 
// Module Name: top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module top  (input   logic 	 clk, reset,           
	     output  logic       memwrite,
	     input logic sw_in,
	     output logic dp,
	     output logic[6:0] seg,
	     output logic[3:0] an,
	     input logic reset_pulse); 
   logic clk_pulse;   
   pulse_controller pulseclk(clk, sw_in, reset_pulse, clk_pulse);
   
   logic rst_pulse;   
   pulse_controller pulserst(clk, reset, reset_pulse, rst_pulse);
   
   display_controller disp(clk, pc[7:4], pc[3:0], dataadr[7:4], dataadr[3:0], seg, dp, an);
   // instantiate processor and memories  
   logic[31:0] writedata, dataadr;
   logic[31:0] pc, instr, readdata;
   logic[31:0] result;
   mips mips (clk_pulse, rst_pulse, pc, instr, memwrite, dataadr, writedata, readdata, result);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk_pulse, memwrite, dataadr, writedata, readdata);

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 19:08:30
// Design Name: 
// Module Name: pulse_controller
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module pulse_controller(
	input CLK, sw_input, clear,
	output reg clk_pulse );

	 reg [2:0] state, nextstate;
	 reg [27:0] CNT; 
	 wire cnt_zero; 

	always @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always @ (sw_input, state, cnt_zero)
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 1; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always @(posedge CLK)
	   case(state)
		3'b001: CNT <= 100000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 100000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 18:58:18
// Design Name: 
// Module Name: mips
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata,
             output logic[31:0] result);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, spc, rol;
  logic [2:0]  alucontrol;

  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc,
                        alusrc, regdst, regwrite, jump, alucontrol, spc, rol);

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump,
                          alucontrol, zero, pc, instr, aluout, writedata, readdata, spc, rol, result);

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 18:58:18
// Design Name: 
// Module Name: controller
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module controller(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump,
                  output logic[2:0] alucontrol,
                  output logic     spc, rol);

   logic [1:0] aluop;
   logic       branch;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
		 jump, aluop, spc);

   aludec  ad (funct, aluop, alucontrol, rol);

   assign pcsrc = branch & zero;

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 18:58:18
// Design Name: 
// Module Name: maindec
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump,
	              output logic[1:0] aluop,
	              output logic spc);
   logic [9:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump, spc} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 10'b1100001000; // R-type
      6'b100011: controls <= 10'b1010010000; // LW
      6'b101011: controls <= 10'b0010100000; // SW
      6'b000100: controls <= 10'b0001000100; // BEQ
      6'b001000: controls <= 10'b1010000000; // ADDI
      6'b000010: controls <= 10'b0000000010; // J
      6'b000001: controls <= 10'b0010100001; // spc
      default:   controls <= 10'bxxxxxxxxxx; // illegal op
    endcase
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 18:58:18
// Design Name: 
// Module Name: aludec
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol,
               output logic rol);
  logic [3:0] controls;
  assign {alucontrol, rol} = controls;
  always_comb
    case(aluop)
      2'b00: controls  = 4'b0100; // add  (for lw/sw/addi/spc)
      2'b01: controls  = 4'b1100;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: controls  = 4'b0100; // ADD
          6'b100010: controls  = 4'b1100; // SUB
          6'b100100: controls  = 4'b0000; // AND
          6'b100101: controls  = 4'b0010; // OR
          6'b101010: controls  = 4'b1110; // SLT
          6'b000001: controls  = 4'b0001; // rol shift
          default:   controls  = 4'bxxxx; // ???
        endcase
    endcase
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 18:58:18
// Design Name: 
// Module Name: datapath
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump,
		         input  logic[2:0]  alucontrol, 
                 output logic zero, 
		         output logic[31:0] pc, 
	             input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	             input  logic[31:0] readdata,
	             input logic spc, rol,
	             output logic[31:0] result);

  logic [4:0]  writereg;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch;
  logic [31:0] signimm, signimmsh, srca, srcb;// result;
  logic [31:0] rol_out;
  logic [31:0] result_before_rol;
  logic [31:0] writedata_before;
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  mux2 #(32)  pcmux(pcnextbr, {pcplus4[31:28], 
                    instr[25:0], 2'b00}, jump, pcnext);

// register file logic
   regfile     rf (clk, regwrite, instr[25:21], instr[20:16], writereg,
                   result, srca, writedata_before);

   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, writereg);
   mux2 #(32)  resmux (aluout, readdata, memtoreg, result_before_rol);
   signext         se (instr[15:0], signimm);

  // ALU logic
   mux2 #(32)  srcbmux (writedata_before, signimm, alusrc, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero);
// rol logic
   rol_operator rol_op(srca, instr[10:6], rol_out);
   mux2 #(32)  rolmux(result_before_rol, rol_out, rol, result);
//spc logic
   mux2 #(32)  spcmux(writedata_before, pc, spc, writedata);

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02.05.2023 18:51:54
// Design Name: 
// Module Name: rol_operator
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module rol_operator(
    input logic [31:0] in,
    input logic [4:0] shamt,
    output logic [31:0] out
    );
    logic [31:0] out_left;
    logic [31:0] out_right;
    left_shifter left(in, shamt, out_left);
    right_shifter right(in, shamt, out_right);
    
    assign out = out_left | out_right;
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02.05.2023 18:48:03
// Design Name: 
// Module Name: left_shifter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module left_shifter(
    input logic [31:0] in,
    input logic [4:0] shamt,
    output logic [31:0] shifted
    );
    assign shifted = in << shamt;
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02.05.2023 18:48:18
// Design Name: 
// Module Name: right_shifter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module right_shifter(
    input logic [31:0] in,
    input logic [4:0] shamt,
    output logic [31:0] shifted
    );
    assign shifted = in >> (32 - shamt);
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.04.2023 18:58:18
// Design Name: 
// Module Name: imem
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
        8'h00: instr = 32'h2014fff6;  	// disassemble, by hand 
        8'h04: instr = 32'h20090007;  	// or with a program,
        8'h08: instr = 32'h22820003;  	// to find out what
        8'h0c: instr = 32'h01342025;  	// this program does!
        8'h10: instr = 32'h00822824;
        8'h14: instr = 32'h00a42820;
        8'h18: instr = 32'h1045003d;
        8'h1c: instr = 32'h0054202a;
        8'h20: instr = 32'h10040001;
        8'h24: instr = 32'h00002820;
        8'h28: instr = 32'h0289202a;
        8'h2c: instr = 32'h00853820;
        8'h30: instr = 32'h00e23822;
        8'h34: instr = 32'hac470057;
        8'h38: instr = 32'h8c020050;
        8'h3c: instr = 32'h08000011;
        8'h40: instr = 32'h20020001;
        8'h44: instr = 32'h2282005a;
        //spc instruction
        8'h48: instr = 32'h04000028; //spc
        8'h4c: instr = 32'h8C080028; //lw
        8'h50: instr = 32'h21080008; //addi
        //rol instruction
        8'h54: instr = 32'h2008A0A0; //addi
        8'h58: instr = 32'h01004881; //rol
        8'h5c: instr = 32'h212A0002; //addi
        
        8'h60: instr = 32'h08000018; // j 48, so it will loop here
        default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule

