// You can add some more logic variables for testing purposes
// but you cannot remove existing variables as we need you to output 
// these values on the waveform for grading
module top_mips (input  logic clk, reset,
                 output  logic[31:0]  instrF,
                 output logic[31:0] PC, PCF,
                 output logic PcSrcD,
                 output logic MemWriteD, MemToRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
                 output logic [2:0]  alucontrol,
                 output logic [31:0] instrD, 
                 output logic [31:0] ALUOutE, WriteDataE,
                 output logic FlushE, StallD, StallF, ForwardAD, ForwardBD,
                 output logic[1:0] ForwardAE, ForwardBE,
                 output logic [31:0] ReadDataW, ALUOutW
                 
                 );


    controller CU(instrD[31:26], instrD[5:0], MemToRegD, MemWriteD, ALUSrcD, RegDstD, RegWriteD, alucontrol, BranchD);
    
    datapath DP(clk, reset, alucontrol, RegWriteD, MemToRegD, MemWriteD, ALUSrcD, RegDstD, BranchD, 
        instrF, instrD, 
        PC, PCF, PcSrcD,
        ALUOutE, WriteDataE,
        FlushE, StallD, StallF, ForwardAD, ForwardBD,
        ForwardAE, ForwardBE,
        ReadDataW, ALUOutW); // Add or remove input-outputs as necessary

endmodule

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop);

   aludec ad (funct, aluop, alucontrol);

endmodule

// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmD to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PcBranchD
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// *******************************************************************************
module datapath (input  logic clk, reset,
                 input  logic[2:0]  ALUControlD,
                 input logic RegWriteD, MemToRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
                 output logic [31:0] instrF,		
                 output logic [31:0] instrD, PC, PCF,
                 output logic PcSrcD,                 
                 output logic [31:0] ALUOutE, WriteDataE,
                 output logic FlushE, StallD, StallF, ForwardAD, ForwardBD,
                 output logic[1:0] ForwardAE, ForwardBE,
                 output logic [31:0] ReadDataW, ALUOutW); // Add or remove input-outputs if necessary

	// ********************************************************************
	// Here, define the wires that are needed inside this pipelined datapath module
	// ********************************************************************
  
  	//* We have defined a few wires for you
    logic [31:0] PcSrcA, PcSrcB, PcBranchD, PcPlus4F;	
  	logic [31:0] SignImmD, ShiftedImmD;
  	logic [31:0] ResultW;
  	logic [4:0] WriteRegW;
  	logic [31:0] RD1, RD2;
  	logic [31:0] SrcBE;
  	logic [31:0] ReadDataM;
  	
  	
	//* You should define others down below (you might want to rename some of the wires above while implementing the pipeline)
    logic shamtD;
    logic shamtE;
    logic [31:0] PcPlus4D;
    logic [4:0] WriteRegE, WriteRegM;
    logic RegWriteE, RegWriteM, RegWriteW;
    logic MemToRegE, MemToRegM, MemToRegW;
    logic MemWriteE, MemWriteM;
    logic ALUSrcE;
    logic RegDstE;
    logic[4:0] rsE, rtE, rdE, rsD, rtD, rdD;
    //logic[1:0] ForwardAE, ForwardBE;
    //logic FlushE, StallD, StallF, ForwardAD, ForwardBD;
    logic[31:0] ALUOutM;
    logic[31:0] RD1e, RD2e, SignImmE; 
    logic[2:0]  ALUControlE;
    logic[31:0] WriteDataM;
  	//* We have provided you with a single-cycle datapath
  	//* You should convert it to a pipelined datapath, changing the connections between modules as necessary
    
  	// Replace with PipeWtoF
    PipeWtoF WtoF(PC, ~StallF, clk, reset, PCF);
    
  	// Do some operations
    assign PcPlus4F = PCF + 4;
    assign PcSrcB = PcBranchD;
	assign PcSrcA = PcPlus4F;
  	mux2 #(32) pc_mux(PcSrcA, PcSrcB, PcSrcD, PC);

    imem im1(PCF[7:2], instrF);
    
  	// Replace the code below with PipeFtoD
  	PipeFtoD FtoD(instrF, PcPlus4F, ~StallD, PcSrcD, clk, reset, instrD, PcPlus4D); // create hazard unit
  
  	// Decode stage
  	logic[31:0] finRD1, finRD2;
  	logic[31:0] SrcBE_before, SrcAE;
  	regfile rf(clk, reset, RegWriteW, instrD[25:21], instrD[20:16], WriteRegW, ResultW, RD1, RD2);
  	signext se(instrD[15:0], SignImmD);
  	
  	sl2 shiftimm(SignImmD, ShiftedImmD);
  	adder branchadd(PcPlus4D, ShiftedImmD, PcBranchD);
  	assign PcSrcD = BranchD & (finRD1 == finRD2);
  	mux2 #(32) forwardad(RD1, ALUOutM, ForwardAD, finRD1);
  	mux2 #(32) forwardbd(RD2, ALUOutM, ForwardBD, finRD2);
  	
    assign rsD = instrD[25:21];
    assign rtD = instrD[20:16];
    assign rdD = instrD[15:11];
    assign shamtD = instrD[10:6];
  	// Instantiate PipeDtoE here
    PipeDtoE DtoE(RD1, RD2, SignImmD, rsD, rtD, rdD, RegWriteD, MemToRegD, MemWriteD, ALUSrcD, RegDstD, ALUControlD, 
        FlushE, clk, reset, shamtD, 
        RD1e, RD2e, SignImmE, rsE, rtE, rdE, RegWriteE, MemToRegE, MemWriteE, ALUSrcE, RegDstE, ALUControlE, shamtE);
  	// Execute stage
  	mux2 #(32) srcBMux(WriteDataE, SignImmE, ALUSrcE, SrcBE);
  	alu alu(SrcAE, SrcBE, ALUControlE, ALUOutE, shamtE);
  	mux2 #(5) wrMux(rtE, rdE, RegDstE, WriteRegE);
    
    mux4 #(32) hazardEMuxA(RD1e, ResultW, ALUOutM, 32'b0, ForwardAE, SrcAE);
    mux4 #(32) hazardEMuxB(RD2e, ResultW, ALUOutM, 32'b0, ForwardBE, WriteDataE);
  	// Replace the code below with PipeEtoM
    PipeEtoM EtoM(clk, reset, reset, ALUOutE, WriteDataE, WriteRegE, RegWriteE, MemToRegE, MemWriteE,
        RegWriteM, MemToRegM, MemWriteM, ALUOutM, WriteDataM, WriteRegM);
  	// Memory stage
  	dmem DM(clk, MemWriteM, ALUOutM, WriteDataM, ReadDataM);

  	// Instantiate PipeMtoW
    PipeMtoW MtoW(clk, reset, reset, ReadDataM, ALUOutM, WriteRegM, RegWriteM, MemToRegM, 
        ReadDataW, ALUOutW, WriteRegW, RegWriteW, MemToRegW);
  	// Writeback stage
  	mux2 #(32) wbmux(ALUOutW, ReadDataW, MemToRegW, ResultW);
  	
  	// Replace the code below with HazardUnit
    HazardUnit hazard(RegWriteW, BranchD, WriteRegW, WriteRegE, RegWriteM, MemToRegM, WriteRegM, RegWriteE, MemToRegE,
                 rsE, rtE, rsD, rtD, ForwardAE, ForwardBE, FlushE, StallD, StallF, ForwardAD, ForwardBD);

endmodule

// The pipe between Writeback (W) and Fetch (F) is given as follows.
module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// ~StallF will be connected as this EN
                output logic[31:0] PCF);

        always_ff @(posedge clk, posedge reset)
            if(reset)
            begin
                PCF <= 0;
            end
            else if(EN)
            begin
                PCF <= PC;
            end
            else
            begin
                PCF <= PCF;
            end
endmodule

// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

// External instruction memory used by MIPS
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.
module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-e.
//  An example test program is given below.        
//	***************************************************************************
//
//		address		instruction
//		-------		-----------
//        8'h00: instr = 32'h20080005;    // addi $t0, $zero, 5      t0 = 5        
//        8'h04: instr = 32'h2009000c;    // addi $t1, $zero, 12     t1 = 12
//        8'h08: instr = 32'h200a0006;    // addi $t2, $zero, 6      t2 = 6
//        8'h0c: instr = 32'h210bfff7;    // addi $t3, $t0, -9       t3 = -4
//        8'h10: instr = 32'h01288025;    // or $s0, $t1, $t0        s0 = 13
//        8'h14: instr = 32'h012a8824;    // and $s1, $t1, $t2       s1 = 4
//        8'h18: instr = 32'h010b9020;    // add $s2, $t0, $t3       s2 = 1
//        8'h1c: instr = 32'h010a202a;    // slt $a0, $t0, $t2       a0 = 1
//        8'h20: instr = 32'h02112820;    // add $a1, $s0, $s1       a1 = 17
//        8'h24: instr = 32'h02493022;    // sub $a2, $s2, $t1       a2 = -11
//        8'h28: instr = 32'had320074;    // sw $s2, 0x74($t1)       s2 = 1
//        8'h2c: instr = 32'h8c020080;    // lw $v0, 0x80($zero)     s2 = 1
        //Test code for compute-use hazards
//        8'h00: instr = 32'h20080005;  //addi $t0, $zero, 5    t0 = 5
//        8'h04: instr = 32'h21090007;  //addi $t1, $t0, 7      t1 = 12
//        8'h08: instr = 32'h210a0002;  //addi $t2, $t0, 2      t2 = 7
//        8'h0c: instr = 32'h012a5025;  //or $t2, $t1, $t2      t2 = 15
//        8'h10: instr = 32'h01498024;  //and $s0, $t2, $t1     s0 = 12
//        8'h14: instr = 32'h01108820;  //add $s1, $t0, $s0     s1 = 17
//        8'h18: instr = 32'h0151902a;  //slt $s2, $t2, $s1     s2 = 1
//        8'h1c: instr = 32'h02318820;  //add $s1, $s1, $s1     s1 = 34
//        8'h20: instr = 32'h02329822;  //sub $s3, $s1, $s2     s3 = 33
//        8'h24: instr = 32'had330074;  //sw $s3, 0x74($t1)     s3 = 33
//        8'h28: instr = 32'h8c020080;  //lw $v0, 0x80($zero)   s3 = 33 

        // Test code for load-use hazard
        8'h00: instr = 32'h20080005;  //addi $t0, $zero, 5   t0 = 5
        8'h04: instr = 32'hac080060;  //sw $t0, 0x60($zero)  0x06 = 5
        8'h08: instr = 32'h8c090060;  //lw $t1, 0x60($zero)  t1 = 5
        8'h0c: instr = 32'h212a0004;  //addi $t2, $t1, 4     t2 = 9
        8'h10: instr = 32'h212b0003;  //addi $t3, $t1, 3     t3 = 8
        8'h14: instr = 32'h8d6b0058;  //lw $t3, 0x58($t3)    t3 = 5
        8'h18: instr = 32'h014b5022;  //sub $t2, $t2, $t3    t2 = 4
        8'h1c: instr = 32'hac0a0070;  //sw $t2, 0x70($zero)  0x70 = 4
        8'h20: instr = 32'h8c080070;  //lw $t0, 0x70($zero)  t0 = 4
        8'h24: instr = 32'h8d09006c;  //lw $t1, 0x6c($t0)    t1 = 4
        8'h28: instr = 32'h01094820;  //add $t1, $t0, $t1    t1 = 8
        
        // Test code for branch hazards
//        8'h00: instr = 32'h20080005;  //addi $t0, $zero, 5   t0 = 5
//        8'h04: instr = 32'h20090003;  //addi $t1, $zero, 3   t1 = 3
//        8'h08: instr = 32'h11090002;  //beq $t0, $t1, 2      devam
//        8'h0c: instr = 32'h01285020;  //add $t2, $t1, $t0    t2 = 8
//        8'h10: instr = 32'h01094022;  //sub $t0, $t0, $t1    t0 = 2
//        8'h14: instr = 32'h2129ffff;  //addi $t1, $t1, -1    t1 = 2
//        8'h18: instr = 32'h11280002;  //beq $t1, $t0, 2      24'e
//        8'h1c: instr = 32'hac0a0050;  //sw $t2, 0x50($zero)  0x50 = 8
//        8'h20: instr = 32'h01284025;  //or $t0, $t1, $t0     t0 = 2
//        8'h24: instr = 32'h0128482a;  //slt $t1, $t1, $t0    t1 = 0
//        8'h28: instr = 32'h11200002;  //beq $t1, $zero, 2    34'e
//        8'h2c: instr = 32'h8c0b0050;  //lw $t3, 0x50($zero)  t3 = 8
//        8'h30: instr = 32'h01284024;  //and $t0, $t1, $t0    t0 = 0
//        8'h34: instr = 32'h1108ffff;  //beq $t0, $t0, -1     loop
        
        
//        8'h00: instr = 32'h20080005;
//        8'h04: instr = 32'h20090003;
//        8'h08: instr = 32'h200a0008;
//        8'h0c: instr = 32'h1109ffff;
        default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule

// Define pipes that exist in the PipelinedDatapath. 
// The pipes between Writeback (W) and Fetch (F), as well as Decode (D) and Execute (E) are given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.
module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clear, clk, reset,
                output logic[31:0] instrD, PcPlus4D);
    always_ff @(posedge clk, posedge reset)
        if(clear || reset)
        begin
            instrD <= 0;
            PcPlus4D <= 0;
        end
        else if(EN) // ~StallD connected to EN
        begin
            instrD <= instr;
            PcPlus4D <= PcPlus4F;
        end
        else
        begin
            instrD <= instrD;
            PcPlus4D <= PcPlus4D;
        end
                
endmodule

module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on falling edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (reset)
        for (int i=0; i<32; i++) rf[i] = 32'b0;
     else if (we3)
        rf[wa3] <= wd3;

  assign rd1 = (ra1 != 0) ? rf[ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ra2] : 0;

endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module PipeDtoE(input logic[31:0] RD1, RD2, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                input logic[2:0] ALUControlD,
                input logic clear, clk, reset,
                input logic [4:0] shamtD,// added
                    output logic[31:0] RsData, RtData, SignImmE,
                    output logic[4:0] RsE, RtE, RdE, 
                    output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                    output logic[2:0] ALUControlE,
                    output logic [4:0] shamtE);// added

        always_ff @(posedge clk, posedge reset)
          if(reset | clear)
                begin
                // Control signals
                RegWriteE <= 0;
                MemtoRegE <= 0;
                MemWriteE <= 0;
                ALUControlE <= 0;
                ALUSrcE <= 0;
                RegDstE <= 0;
                
                // Data
                RsData <= 0;
                RtData <= 0;
                RsE <= 0;
                RtE <= 0;
                RdE <= 0;
                SignImmE <= 0;
                shamtE <= 0; // added
                end
            else
                begin
                // Control signals
                RegWriteE <= RegWriteD;
                MemtoRegE <= MemtoRegD;
                MemWriteE <= MemWriteD;
                ALUControlE <= ALUControlD;
                ALUSrcE <= ALUSrcD;
                RegDstE <= RegDstD;
                
                // Data
                RsData <= RD1;
                RtData <= RD2;
                RsE <= RsD;
                RtE <= RtD;
                RdE <= RdD;
                SignImmE <= SignImmD;
                shamtE <= shamtD; // added
                end

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           input  logic [4:0] shamt);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            3'b101: result = (a << shamt) | (a >> (32 - shamt)); // for rol operation   
            default: result = {32{1'bx}};
        endcase    
endmodule

// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s[1] ? ( s[0] ? d3 : d2 ) : (s[0] ? d1 : d0); 
endmodule

module PipeEtoM(input clk, reset, clear,
                input logic[31:0] ALUOutE, WriteDataE,
                input logic[4:0] WriteRegE,
                input logic RegWriteE, MemToRegE, MemWriteE,
                output logic RegWriteM, MemToRegM, MemWriteM,
                output logic [31:0] ALUOutM, WriteDataM,
                output logic [4:0] WriteRegM);
    always_ff @(posedge clk, posedge reset)
        if(reset | clear)
        begin
            RegWriteM <= 0;
            MemToRegM <= 0;
            MemWriteM <= 0;
            ALUOutM <= 0;
            WriteDataM <= 0;
            WriteRegM <= 0;    
        end
        else
        begin
            RegWriteM <= RegWriteE;
            MemToRegM <= MemToRegE;
            MemWriteM <= MemWriteE;
            ALUOutM <= ALUOutE;
            WriteDataM <= WriteDataE;
            WriteRegM <= WriteRegE;
        end
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04.05.2023 20:57:58
// Design Name: 
// Module Name: dmem
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule


module PipeMtoW(input logic clk, reset, clear,
                input logic [31:0] ReadDataM, ALUOutM,
                input logic [4:0] WriteRegM,
                input logic RegWriteM, MemToRegM,
                output logic [31:0] ReadDataW, ALUOutW,
                output logic [4:0] WriteRegW,
                output logic RegWriteW, MemToRegW);
    always_ff @(posedge clk, posedge reset)
        if(reset | clear)
        begin
            ReadDataW <= 0;
            ALUOutW <= 0;
            WriteRegW <= 0;
            RegWriteW <= 0;
            MemToRegW <= 0;
        end
        else
        begin
            ReadDataW <= ReadDataM;
            ALUOutW <= ALUOutM;
            WriteRegW <= WriteRegM;
            RegWriteW <= RegWriteM;
            MemToRegW <= MemToRegM;
        end
    
endmodule

module HazardUnit(  input logic RegWriteW, BranchD,
                    input logic [4:0] WriteRegW, WriteRegE,
                    input logic RegWriteM,MemtoRegM,
                    input logic [4:0] WriteRegM,
                    input logic RegWriteE,MemtoRegE,
                    input logic [4:0] rsE,rtE,
                    input logic [4:0] rsD,rtD,
                    output logic [1:0] ForwardAE,ForwardBE,
                    output logic FlushE,StallD,StallF,ForwardAD, ForwardBD
                 ); // Add or remove input-outputs if necessary
       
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
//	logic branchStall, lwStall;
//	always_comb
//	   begin
//	       if(rsE != 0)
//	       begin
//	           if((rsE == WriteRegM) & RegWriteM)
//	               ForwardAE = 2'b10;
//               else if((rsE == WriteRegW) & RegWriteW)
//                   ForwardAE = 2'b01;
//               else
//               begin
//                   ForwardAE = 2'b00;
//               end
//           end
//           else
//           begin
//               ForwardAE = 2'b00;     
//           end              
//	       if(rtE != 0)
//	       begin                                
//               if((rtE == WriteRegM) & RegWriteM)        
//                   ForwardBE = 2'b10;                  
//               else if((rtE == WriteRegW) & RegWriteW)
//                   ForwardBE = 2'b01;
//               else
//               begin
//                   ForwardBE = 2'b00;
//               end
//           end
//           else
//           begin
//               ForwardBE = 2'b00;
//           end               
//	   end
	   
//	assign ForwardAD = (rsD != 0) & (rsD == WriteRegM) & RegWriteM;
//	assign ForwardBD = (rtD != 0) & (rtD == WriteRegM) & RegWriteM;
	
//	assign lwStall = MemtoRegE & ((rsD == rsE) | (rtD == rtE));
//	assign branchStall = BranchD & ((RegWriteE & (rsD == WriteRegE | rtD == WriteRegE))
//	   | (MemtoRegM & (rsD == WriteRegE | rtD == WriteRegE)));
	
//	assign FlushE = lwStall | branchStall;
//	assign StallF = lwStall | branchStall;
//	assign StallD = lwStall | branchStall;
//////////////////////////////////////////////////////////////////////////////
    logic lwstallD, branchstallD;
    // forwarding sources to D stage (branch equality)
    assign ForwardAD = (rsD !=0 & rsD == WriteRegM &
    RegWriteM);
    assign ForwardBD = (rtD !=0 & rtD == WriteRegM &
    RegWriteM);
    // forwarding sources to E stage (ALU)
    always_comb
        begin
            ForwardAE = 2'b00; ForwardBE = 2'b00;
            if (rsE != 0)
                if (rsE == WriteRegM & RegWriteM)
                    ForwardAE = 2'b10;
                else if (rsE == WriteRegW & RegWriteW)
                    ForwardAE = 2'b01;
            if (rtE != 0)
                if (rtE == WriteRegM & RegWriteM)
                    ForwardBE = 2'b10;
                else if (rtE == WriteRegW & RegWriteW)
                    ForwardBE = 2'b01;
        end
    // stalls
    assign #1 lwstallD = MemtoRegE & (rtE == rsD | rtE == rtD);
    assign #1 branchstallD = BranchD &
        (RegWriteE &
        (WriteRegE == rsD | WriteRegE == rtD) |
         MemtoRegM &
        (WriteRegM == rsD | WriteRegM == rtD));
    assign #1 StallD = lwstallD | branchstallD;
    assign #1 StallF = StallD;
    // stalling D stalls all previous stages
    assign #1 FlushE = StallD;
    // stalling D flushes next stage
    // Note: not necessary to stall D stage on store
    // if source comes from load;
    // instead, another bypass network could
    // be added from W to M
endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] aluop );
  logic [7:0] controls;

  assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 8'b11000010; // R-type
      6'b100011: controls <= 8'b10100100; // LW
      6'b101011: controls <= 8'b00101000; // SW
      6'b000100: controls <= 8'b00010001; // BEQ
      6'b001000: controls <= 8'b10100000; // ADDI
      default:   controls <= 8'bxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          6'b000001: alucontrol  = 3'b101; // ROL
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule